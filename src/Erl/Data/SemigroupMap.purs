module Erl.Data.Map.SemigroupMap where

import Control.Alt (class Alt)
import Control.Apply (class Apply)
import Control.Bind (class Bind)
import Control.Plus (class Plus)
import Data.Eq (class Eq, class Eq1)
import Data.Foldable (class Foldable)
import Data.FoldableWithIndex (class FoldableWithIndex)
import Data.Functor (class Functor)
import Data.FunctorWithIndex (class FunctorWithIndex)
import Data.Monoid (class Monoid)
import Data.Newtype (class Newtype)
import Data.Ord (class Ord, class Ord1)
import Data.Semigroup (class Semigroup)
import Data.Show (class Show)
import Data.Traversable (class Traversable)
import Data.TraversableWithIndex (class TraversableWithIndex)
import Erl.Data.Map (Map)

newtype SemigroupMap k v = SemigroupMap (Map k v)

derive newtype instance Eq k => Eq1 (SemigroupMap k)
derive newtype instance (Eq k, Eq v) => Eq (SemigroupMap k v)
derive newtype instance Ord k => Ord1 (SemigroupMap k)
derive newtype instance (Ord k, Ord v) => Ord (SemigroupMap k v)
derive instance Newtype (SemigroupMap k v) _
derive newtype instance (Show k, Show v) => Show (SemigroupMap k v)
derive newtype instance (Ord k, Semigroup v) => Semigroup (SemigroupMap k v)
derive newtype instance (Ord k, Semigroup v) => Monoid (SemigroupMap k v)
derive newtype instance Ord k => Alt (SemigroupMap k)
derive newtype instance Ord k => Plus (SemigroupMap k)
derive newtype instance Ord k => Apply (SemigroupMap k)
derive newtype instance Ord k => Bind (SemigroupMap k)
derive newtype instance Functor (SemigroupMap k)
derive newtype instance FunctorWithIndex k (SemigroupMap k)
derive newtype instance Foldable (SemigroupMap k)
derive newtype instance FoldableWithIndex k (SemigroupMap k)
derive newtype instance Traversable (SemigroupMap k)
derive newtype instance TraversableWithIndex k (SemigroupMap k)
